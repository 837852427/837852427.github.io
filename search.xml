<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[jQuery特效小实验]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF18%2F</url>
    <content type="text"><![CDATA[示例&lt;!DOCTYPE html&gt; jquery实验 click L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","model":{"jsonPath":"/live2dw/assets/assets/hibiki.model.json"},"display":{"position":"left","width":100,"height":300},"mobile":{"show":false},"log":false,"tagMode":false}); 源代码JavaScript部分1234567891011121314$('#test1').css( &#123; 'background-color':'red', 'color':'white', 'width':'50%' &#125;);$('#test1').on('click',function() &#123; $('#test1').after($('&lt;h1&gt;确认点击&lt;/h1&gt;')); $('#test1').hide(800).sideDown(800); &#125;) html部分123456789101112&lt;!DOCTYPE html&gt;&lt;html lang="en" dir="ltr"&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;jquery实验&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 id="test1"&gt;click&lt;/h1&gt; &lt;script src="https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js"&gt;&lt;/script&gt; &lt;script src="/js/src/jq.js"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo用jQuery实现背景图随机导入]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF17%2F</url>
    <content type="text"><![CDATA[不得不说jq确实好用一些，JavaScript我都不知道为啥控制不了body的background-image的css，真的很无语，换成jq就行了 源代码首先放上代码 JavaScript部分12345678910111213141516171819var pic=[ "https://i.loli.net/2019/02/23/5c702b57c3bbb.png", "https://i.loli.net/2019/02/23/5c702b5831271.jpg", "https://i.loli.net/2019/02/23/5c702b584bf33.png", "https://i.loli.net/2019/02/23/5c702b588ebcb.png", "https://i.loli.net/2019/02/23/5c702f87a58b5.jpg"];var i=Math.random();if(i&lt;=0.2)i=0;else if(i&lt;=0.4)i=1;else if(i&lt;=0.6)i=2;else if(i&lt;=0.8)i=3;elsei=4;$('body').css('background-image','url('+pic[i]+')'); CSS部分1234567body&#123; /*background-image: url(https://i.loli.net/2019/02/23/5c70b157320e8.jpg);*/ background-size: cover; background-repeat: no-repeat; background-attachment: fixed;&#125; 如何使用？首先在themes/source/js/src中创建一个bg.js(当然名字你随意)，然后把我JavaScript的代码复制进去，具体的那些图片你可以在pic数组中进行修改但是如果你数量变更的话，最好把随机数的那个选取也改一下然后在themes/layout/_ layout.swig的前添加1&lt;script type="text/javascript" src="/js/src/bg.js"&gt;&lt;/script&gt; 这样我们算是完成了JavaScript部分的配置然后我们在themes/source/css/_ custom/custom.styl中开头加入CSS部分的语句即可最后hexo clean&amp;&amp;hexo g –d]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用JavaScript添加一个计时器选图的hexo博客文章底栏插件]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF16%2F</url>
    <content type="text"><![CDATA[源代码首先放上代码，html部分还用了一些css但是测试了一下发现只有img的盒子大小和文字居中有效，其他不知道为啥没效，还有就是hexo还是next好像并不支持用img的width和height属性所以我才加了css第一次写JavaScript脚本写的比较丑还多见谅其中在52行的pic数组中可以放入你喜欢的图片 JavaScript部分123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139var click1_html;var i=0;var loop1;var body;var re1,re2,re3,re4,re5,re6,re7;function click1()&#123; var dir=document.getElementById('one'); click1_html=dir; var p=dir.parentNode; body=p; p.removeChild(dir); var n=document.createElement('h1'); var n_text=document.createTextNode('点击选择按钮即可选择'); re1=n; n.appendChild(n_text); p.appendChild(n); var eimg=document.createElement('img'); re2=eimg; eimg.id='img1'; eimg.width='800'; eimg.height='600'; p.appendChild(eimg); var ebut=document.createElement('button'); ebut.type='button'; ebut.id='two'; var ebut_t=document.createTextNode('选择'); re3=ebut; var nn=document.createElement('br'); ebut.appendChild(ebut_t); p.appendChild(nn); p.appendChild(ebut); loop1=setInterval(changeImage,30); document.getElementById('two').addEventListener('click',click2,false);&#125;function changeImage()&#123; var pic=[ "https://i.loli.net/2019/02/22/5c6ff377c521d.jpg", "https://i.loli.net/2019/02/22/5c6ff377d0fc6.jpg", "https://i.loli.net/2019/02/22/5c6ff377d0d5f.png", "https://i.loli.net/2019/02/22/5c6ff377d1750.jpg", "https://i.loli.net/2019/02/22/5c6ff377d547f.jpg", "https://i.loli.net/2019/02/22/5c6ff377d563a.jpg", "https://i.loli.net/2019/02/22/5c6ff3780db68.jpg", "https://i.loli.net/2019/02/22/5c6ff3780f0f0.jpg", "https://i.loli.net/2019/02/22/5c6ff378167cb.jpeg", "https://i.loli.net/2019/02/22/5c6ff378178c8.jpeg", "https://i.loli.net/2019/02/22/5c6ff41dc472c.jpg", "https://i.loli.net/2019/02/22/5c6ff41dc6780.jpg", "https://i.loli.net/2019/02/22/5c6ff41dc87c9.jpg", "https://i.loli.net/2019/02/22/5c6ff41dc28c8.jpg", "https://i.loli.net/2019/02/22/5c6ff41dca549.jpg", "https://i.loli.net/2019/02/22/5c6ff41dcc4bb.jpg", "https://i.loli.net/2019/02/22/5c6ff41dd07c7.jpg", "https://i.loli.net/2019/02/22/5c6ff41dd2797.jpg", "https://i.loli.net/2019/02/22/5c6ff41dce646.jpg", "https://i.loli.net/2019/02/22/5c6ff41e61ebc.png" ]; i++; if(i&gt;=pic.length) i=0; document.getElementById('img1').src=pic[i];&#125;function click2()&#123; clearInterval(loop1); body.removeChild(re3); var n1=document.createElement('button'); var n2=document.createElement('button'); var h1=document.createElement('h1'); var n1_t=document.createTextNode('带回家！！！'); var n2_t=document.createTextNode('我选择放弃'); var h1_t=document.createTextNode('是否选择带回家？有一定的几率'); re4=h1; n1.appendChild(n1_t); n2.appendChild(n2_t); n1.id='yes'; n2.id='no'; h1.appendChild(h1_t); body.appendChild(h1); body.appendChild(n1); body.appendChild(n2); n1.addEventListener('click',yes1,false); n2.addEventListener('click',no1,false);&#125;var rand=Math.random();function yes1()&#123; if(rand&gt;=0.75) var now=alert('抱歉你并没有成功'); else var now=alert('恭喜你成功了！！！'); retry();&#125;function no1()&#123; var now=alert('真是一个让人遗憾的选择啊！！！'); retry();&#125;function retry()&#123; body.removeChild(document.getElementById('yes')); body.removeChild(document.getElementById('no')); var h1=document.createElement('h1'); var h1_t=document.createTextNode('是否要重新来过?'); re5=h1; var n1=document.createElement('button'); var n2=document.createElement('button'); var n1_t=document.createTextNode('是'); var n2_t=document.createTextNode('否'); n1.appendChild(n1_t); n2.appendChild(n2_t); re6=n1; re7=n2; h1.appendChild(h1_t); body.appendChild(h1); body.appendChild(n1); body.appendChild(n2); n1.addEventListener('click',yes2,false); n2.addEventListener('click',no2,false);&#125;function yes2()&#123; body.removeChild(re1); body.removeChild(re2); body.removeChild(re4); body.removeChild(re5); body.removeChild(re6); body.removeChild(re7); body.appendChild(click1_html);&#125;function no2()&#123; alert('你仍然可以刷新进行重新选择'); body.removeChild(re6); body.removeChild(re7);&#125;document.getElementById('one').addEventListener('click',click1,false); html部分1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html lang="en" dir="ltr"&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;小游戏&lt;/title&gt; &lt;style&gt; #img1 &#123; width: 800px; height: 600px; border-style: outset; border-color: orange; &#125; body &#123; border-style: groove; border-width: medium; border: orange; &#125; #text1 &#123; text-align: center; &#125; #one &#123; margin: auto; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="border"&gt; &lt;h1 id="text1"&gt;---小游戏:要不要来选择一下自己可能的老婆？---&lt;/h1&gt; &lt;button type="button" id="one"&gt;开始&lt;/button&gt; &lt;script src="/js/src/game.js"&gt; &lt;/script&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 如何放到每篇文章的最底下？首先你需要在theme/layout目录下新建一个game.swig(当然名字随意)然后把html部分抄上去并且在开头加上1&#123;% if theme.passage_end_tag.enabled %&#125; 接着在同目录下的post.swig中找到id为post-expand的div下加入12345&lt;div &gt; &#123;% if not is_index %&#125; &#123;% include 'game.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; 然后再找到theme/source/js/src新建一个game.js(同样名字可以随意)接着把所有的JavaScript代码复制进去即可最后hexo clean&amp;&amp;hexo g –d部署到服务器就行了]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2Funcategorizedjs%2F</url>
    <content type="text"><![CDATA[Javascript实验 测试标题1 点击我 document.getElementById('test').innerHTML='TEST'; function check() { var x; var y=confirm('请点击'); if(y==true) x='thats good'; else x='thats bad'; document.getElementById('hide').textContent=x; } document.getElementById('onee').addEventListener('click',check,false); L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","model":{"jsonPath":"/live2dw/assets/assets/hibiki.model.json"},"display":{"position":"left","width":100,"height":300},"mobile":{"show":false},"log":false,"tagMode":false});]]></content>
  </entry>
  <entry>
    <title><![CDATA[JavaScript 事件监听器的一个小小的实验]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF15%2F</url>
    <content type="text"><![CDATA[这里是实例 胡乱分析JavaScript的代码还是和html有些区别的。。。首先html的id要用双引号””而JavaScript的里面我看到的都是单引号’’并且不管是textConten还是innerHTML后面都是跟的字符串直接写的话要加’’还有就是如何看JavaScript的语法错误，实际上f12就可以查看了在浏览器中事件监听器用addEventListener(‘时间类型’,函数名,false); html 部分12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html lang="en" dir="ltr"&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;Javascript实验&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 id="test"&gt; 测试标题1 &lt;/h1&gt; &lt;button type="button" id="one"&gt;点击我&lt;/button&gt; &lt;h1 id="hide"&gt;&lt;/h1&gt; &lt;script&gt; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; JavaScript部分123456789101112document.getElementById('test').innerHTML='&lt;h1&gt;TEST&lt;/h1&gt;';function check()&#123; var x; var y=confirm('请点击'); if(y==true) x='thats good'; else x='thats bad'; document.getElementById('hide').textContent=x;&#125;document.getElementById('one').addEventListener('click',check,false);]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Codeforces Round 540 (Div. 3)(补题)]]></title>
    <url>%2F%E8%A1%A5%E9%A2%9814%2F</url>
    <content type="text"><![CDATA[A. Water Buying(贪心)胡乱分析实际上没有什么难的，如果你用一种方案那么就要用到底，因为这只有两种情况方案一合适或者方案二合适，然后分n的奇偶性来输出即可 代码12345678910111213141516171819#include &lt;bits/stdc++.h&gt;using namespace std;int main()&#123; ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); int t; cin&gt;&gt;t; while(t--) &#123; long long n,a,b; cin&gt;&gt;n&gt;&gt;a&gt;&gt;b; if(n&amp;1) cout&lt;&lt;min(n*a,(n/2)*b+a)&lt;&lt;"\n"; else cout&lt;&lt;min((n/2)*b,n*a)&lt;&lt;"\n"; &#125;&#125; 今天早上我又用刚学的js来了一波，js弱数据类型语言第一次接触对他的判别有点不熟悉导致出现了一个小bug最终也调好了 代码123456789var n=parseInt(readline());for(var i=0;i&lt;n;i++)&#123; var s=readline().split(' '); if(s[0]%2==0) print(Math.min(s[0]*s[1],(s[0]/2)*s[2])); else print(Math.min(s[0]*s[1],Math.floor(s[0]/2)*s[2]+parseInt(s[1])));&#125; B. Tanya and Candies(思维)胡乱分析上来寻思了一阵最终得到了和出题人一样的思路奇数偶数项去掉的话奇数偶数会倒置所以根据这个特性来判断即可 代码1234567891011121314151617181920212223242526272829303132333435#include &lt;bits/stdc++.h&gt;using namespace std;long long num[666666];int main()&#123; ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); int n; long long sum1=0,sum2=0,sum11=0,sum22=0,ans=0,now1=0,now2=0; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) &#123; cin&gt;&gt;num[i]; if(i&amp;1) sum1+=num[i]; else sum2+=num[i]; &#125; sum11=sum1;sum22=sum2; for(int i=1;i&lt;=n;i++) &#123; if(i&amp;1) sum1-=num[i]; else sum2-=num[i]; if(now1+sum2==now2+sum1) ans++; if(i&amp;1) now1+=num[i]; else now2+=num[i]; &#125; cout&lt;&lt;ans;&#125; C. Palindromic Matrix(数学&amp;&amp;模拟)这个题目前还有争议主要就是出的有点复杂并且难度有点高，我现在也没有搞懂 D1. Coffee and Coursework (Easy version)(贪心)胡乱分析当时有点贪心的太容易了导致了wa，我最初想的是要都喝了然后如果不行留下当前天数的喝的数然后再继续循环喝完的操作但是实际上只留下一杯是远远的不够贪心的这里用一种非常简单的方法即可枚举出来留下合适的杯数123for(int i=1;i&lt;=n;i++)for(int j=0;j&lt;n;j++)sum+=max(0,num[j]-j/i); 看着是非常的奇怪但是实际上这种方法能够保证计算出最优的答案，因为j如果不是i的倍数那么会一直累加到之前的天数上并且发生了自己应当的变化真的太美妙了！！！ 代码1234567891011121314151617181920212223#include &lt;bits/stdc++.h&gt;using namespace std;int main()&#123; ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); int n,m; cin&gt;&gt;n&gt;&gt;m; vector&lt;int&gt; num(n+10); for(int i=1;i&lt;=n;i++) cin&gt;&gt;num[i]; sort(num.rbegin(),num.rend()); for(int i=1;i&lt;=n;i++) &#123; int sum=0; for(int j=0;j&lt;n;j++) sum+=max(0,num[j]-j/i); if(sum&gt;=m) return cout&lt;&lt;i,0; &#125; cout&lt;&lt;-1;&#125; D2. Coffee and Coursework (Hard Version)(贪心&amp;&amp;二分)胡乱分析跟第D1不一样的地方就是限制了O(n2)的算法，那么对于这种能够靠条件判断出范围的问题我们可以用二分搜索来减少时间复杂度这里也是又对二分有了一些理解并且也准备以后按照MikeMirzayanov的写法进行书写12345678910while(r-l&gt;precision) //这里的precision是一个精度可以如果是整数那么就是1，小数的话保留小数位数向上一位即可&#123; int mid=(l+r)&gt;&gt;1; //如果是小数的话改成double if(check(mid)) //转换边界 else //转换边界 //这里的转换边界看是要求一个范围内的最小值还是最大值，最小值的话就是缩小右边界否则就是缩小左边界&#125; 代码123456789101112131415161718192021222324252627282930313233343536#include &lt;bits/stdc++.h&gt;using namespace std;vector&lt;int&gt; num(666666);int n,m;int check(int x)&#123; long long sum=0; for(int i=0;i&lt;n;i++) sum+=max(0,num[i]-i/x); return sum&gt;=m;&#125;int main()&#123; ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); cin&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=n;i++) cin&gt;&gt;num[i]; sort(num.rbegin(),num.rend()); int l=1,r=n; while(r-l&gt;1) &#123; int mid=(r+l)&gt;&gt;1; if(check(mid)) r=mid; else l=mid; &#125; if(check(l)) cout&lt;&lt;l; else if(check(r)) cout&lt;&lt;r; else cout&lt;&lt;-1;&#125;]]></content>
      <categories>
        <category>补题</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3动画实验]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF13%2F</url>
    <content type="text"><![CDATA[下面是例子点击这里查看 如何实现基础的动画?主要是要注意@keyframes基础的是from to其他的用%来规定的，一般是必须要写上0%和100%的如果要进行移动的操作那么position就得是relative然后进行一些relative的操作 代码lt;!DOCTYPE html&gt;&lt;html lang="en" dir="ltr"&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;CSS3动画实验&lt;/title&gt; &lt;style&gt; div.one &#123; background-color: blue; width: 400px; height: 400px; animation: a1 5s infinite; &#125; @keyframes a1 &#123; 0% &#123;background:red;&#125; 25% &#123;background:yellow;&#125; 50% &#123;background:blue;&#125; 100% &#123;background:green;&#125; &#125; div.two &#123; height: 200px; width: 200px; background-color: red; animation: a2 5s infinite; position: relative; &#125; @keyframes a2 &#123; 0% &#123;background:red; left:0px; top:0px;&#125; 25% &#123;background:yellow; left:200px; top:0px;&#125; 50% &#123;background:blue; left:200px; top:200px;&#125; 75% &#123;background:green; left:0px; top:200px;&#125; 100% &#123;background:red; left:0px; top:0px;&#125; &#125; .solarsys&#123; width: 800px; height: 800px;; position: relative; margin: 0 auto; background-color: #000000; padding: 0; transform: scale(1);&#125;/*太阳*/.sun &#123; left:357px; top:357px; height: 90px; width: 90px; background-color: rgb(248,107,35); border-radius: 50%; box-shadow: 5px 5px 10px rgb(248,107,35), -5px -5px 10px rgb(248,107,35), 5px -5px 10px rgb(248,107,35), -5px 5px 10px rgb(248,107,35); position: absolute; margin: 0;&#125;/*水星*/.mercury &#123; left:337.5px; top:395px; height: 10px; width: 10px; background-color: rgb(166,138,56); border-radius: 50%; position: absolute; transform-origin: 62.5px 5px; animation: rotate 1.5s infinite linear;&#125;/*水星轨道*/.mercuryOrbit &#123; left:342.5px; top:342.5px; height: 115px; width: 115px; background-color: transparent; border-radius: 50%; border-style: dashed; border-color: gray; position: absolute; border-width: 1px; margin: 0px; padding: 0px;&#125;/*金星*/.venus &#123; left:309px; top:389px; height: 22px; width: 22px; background-color: rgb(246,157,97); border-radius: 50%; position: absolute; transform-origin: 91px 11px; animation: rotate 3.84s infinite linear;&#125;/*金星轨道*/.venusOrbit &#123; left:320px; top:320px; height: 160px; width: 160px; background-color: transparent; border-radius: 50%; border-style: dashed; border-color: gray; position: absolute; border-width: 1px; /*margin: 100px;*/ /*transform-origin: -75px -75px;*/ /*animation: rotate 4s infinite linear;*/ margin: 0px; padding: 0px;&#125;/*地球*/.earth &#123; left:266.5px; top:391px; height: 18px; width: 18px; background-color: rgb(115,114,174); border-radius: 50%; position: absolute; transform-origin: 134px 9px; animation: rotate 6.25s infinite linear;&#125;/*地球轨道*/.earthOrbit &#123; left:275px; top:275px; height: 250px; width: 250px; background-color: transparent; border-radius: 50%; border-style: dashed; border-color: gray; position: absolute; border-width: 1px; /*margin: 100px;*/ /*transform-origin: -75px -75px;*/ /*animation: rotate 4s infinite linear;*/ margin: 0px; padding: 0px;&#125;/*火星*/.mars &#123; left:222.5px; top:392.5px; height: 15px; width: 15px; background-color: rgb(140,119,63); border-radius: 50%; position: absolute; transform-origin: 177.5px 7.5px; animation: rotate 11.75s infinite linear;&#125;/*火星轨道*/.marsOrbit &#123; left:230px; top:230px; height: 340px; width: 340px; background-color: transparent; border-radius: 50%; border-style: dashed; border-color: gray; position: absolute; border-width: 1px; /*margin: 100px;*/ /*transform-origin: -75px -75px;*/ /*animation: rotate 4s infinite linear;*/ margin: 0px; padding: 0px;&#125;/*木星*/.jupiter &#123; left:134px; top:379px; height: 42px; width: 42px; background-color: rgb(156,164,143); border-radius: 50%; position: absolute; transform-origin: 266px 21px; animation: rotate 74.04s infinite linear;&#125;/*木星轨道*/.jupiterOrbit &#123; left:155px; top:155px; height: 490px; width: 490px; background-color: transparent; border-radius: 50%; border-style: dashed; border-color: gray; position: absolute; border-width: 1px; /*margin: 100px;*/ /*transform-origin: -75px -75px;*/ /*animation: rotate 4s infinite linear;*/ margin: 0px; padding: 0px;&#125;/*土星*/.saturn &#123; left:92px; top:387px; height: 26px; width: 26px; background-color: rgb(215,171,68); border-radius: 50%; position: absolute; transform-origin: 308px 13px; animation: rotate 183.92s infinite linear;&#125;/*土星轨道*/.saturnOrbit &#123; left:105px; top:105px; height: 590px; width: 590px; background-color: transparent; border-radius: 50%; border-style: dashed; border-color: gray; position: absolute; border-width: 1px; /*margin: 100px;*/ /*transform-origin: -75px -75px;*/ /*animation: rotate 4s infinite linear;*/ margin: 0px; padding: 0px;&#125;/*天王星*/.uranus &#123; left:41.5px; top:386.5px; height: 27px; width: 27px; background-color: rgb(164,192,206); border-radius: 50%; position: absolute; transform-origin: 358.5px 13.5px; animation: rotate 524.46s infinite linear;&#125;/*天王星轨道*/.uranusOrbit &#123; left:55px; top:55px; height: 690px; width: 690px; background-color: transparent; border-radius: 50%; border-style: dashed; border-color: gray; position: absolute; border-width: 1px; /*margin: 100px;*/ /*transform-origin: -75px -75px;*/ /*animation: rotate 4s infinite linear;*/ margin: 0px; padding: 0px;&#125;/*海王星*/.neptune &#123; left:10px; top:390px; height: 20px; width: 20px; background-color: rgb(133,136,180); border-radius: 50%; position: absolute; transform-origin: 390px 10px; animation: rotate 1028.76s infinite linear;&#125;/*海王星轨道*/.neptuneOrbit &#123; left:20px; top:20px; height: 760px; width: 760px; background-color: transparent; border-radius: 50%; border-style: dashed; border-color: gray; position: absolute; border-width: 1px; /*margin: 100px;*/ /*transform-origin: -75px -75px;*/ /*animation: rotate 4s infinite linear;*/ margin: 0px; padding: 0px;&#125;@keyframes rotate &#123; 100% &#123; transform: rotate(-360deg); &#125;&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;下面请尽情欣赏动画&lt;/h1&gt; &lt;p&gt;这是一个基础的颜色变换&lt;/p&gt; &lt;div class="one"&gt; &lt;/div&gt; &lt;p&gt;这是一个带移动的动画&lt;/p&gt; &lt;div class="two"&gt; &lt;/div&gt; &lt;br /&gt; &lt;br /&gt; &lt;br /&gt; &lt;p&gt;大佬的太阳系公转动画orz&lt;/p&gt; &lt;div class="solarsys"&gt; &lt;!--太阳--&gt; &lt;div class='sun'&gt;&lt;/div&gt; &lt;!--水星轨道--&gt; &lt;div class='mercuryOrbit'&gt;&lt;/div&gt; &lt;!--水星--&gt; &lt;div class='mercury'&gt;&lt;/div&gt; &lt;!--金星轨道--&gt; &lt;div class='venusOrbit'&gt;&lt;/div&gt; &lt;!--金星--&gt; &lt;div class='venus'&gt;&lt;/div&gt; &lt;!--地球轨道--&gt; &lt;div class='earthOrbit'&gt;&lt;/div&gt; &lt;!--地球--&gt; &lt;div class='earth'&gt;&lt;/div&gt; &lt;!--火星轨道--&gt; &lt;div class='marsOrbit'&gt;&lt;/div&gt; &lt;!--火星--&gt; &lt;div class='mars'&gt;&lt;/div&gt; &lt;!--木星轨道--&gt; &lt;div class='jupiterOrbit'&gt;&lt;/div&gt; &lt;!--木星--&gt; &lt;div class='jupiter'&gt;&lt;/div&gt; &lt;!--土星轨道--&gt; &lt;div class='saturnOrbit'&gt;&lt;/div&gt; &lt;!--土星--&gt; &lt;div class='saturn'&gt;&lt;/div&gt; &lt;!--天王星轨道--&gt; &lt;div class='uranusOrbit'&gt;&lt;/div&gt; &lt;!--天王星--&gt; &lt;div class='uranus'&gt;&lt;/div&gt; &lt;!--海王星轨道--&gt; &lt;div class='neptuneOrbit'&gt;&lt;/div&gt; &lt;!--海王星--&gt; &lt;div class='neptune'&gt;&lt;/div&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2Funcategorizedcss3%20animation%2F</url>
    <content type="text"><![CDATA[CSS3动画实验 div.one { background-color: blue; width: 400px; height: 400px; animation: a1 5s infinite; } @keyframes a1 { 0% {background:red;} 25% {background:yellow;} 50% {background:blue;} 100% {background:green;} } div.two { height: 200px; width: 200px; background-color: red; animation: a2 5s infinite; position: relative; } @keyframes a2 { 0% {background:red; left:0px; top:0px;} 25% {background:yellow; left:200px; top:0px;} 50% {background:blue; left:200px; top:200px;} 75% {background:green; left:0px; top:200px;} 100% {background:red; left:0px; top:0px;} } .solarsys{ width: 800px; height: 800px;; position: relative; margin: 0 auto; background-color: #000000; padding: 0; transform: scale(1); } /*太阳*/ .sun { left:357px; top:357px; height: 90px; width: 90px; background-color: rgb(248,107,35); border-radius: 50%; box-shadow: 5px 5px 10px rgb(248,107,35), -5px -5px 10px rgb(248,107,35), 5px -5px 10px rgb(248,107,35), -5px 5px 10px rgb(248,107,35); position: absolute; margin: 0; } /*水星*/ .mercury { left:337.5px; top:395px; height: 10px; width: 10px; background-color: rgb(166,138,56); border-radius: 50%; position: absolute; transform-origin: 62.5px 5px; animation: rotate 1.5s infinite linear; } /*水星轨道*/ .mercuryOrbit { left:342.5px; top:342.5px; height: 115px; width: 115px; background-color: transparent; border-radius: 50%; border-style: dashed; border-color: gray; position: absolute; border-width: 1px; margin: 0px; padding: 0px; } /*金星*/ .venus { left:309px; top:389px; height: 22px; width: 22px; background-color: rgb(246,157,97); border-radius: 50%; position: absolute; transform-origin: 91px 11px; animation: rotate 3.84s infinite linear; } /*金星轨道*/ .venusOrbit { left:320px; top:320px; height: 160px; width: 160px; background-color: transparent; border-radius: 50%; border-style: dashed; border-color: gray; position: absolute; border-width: 1px; /*margin: 100px;*/ /*transform-origin: -75px -75px;*/ /*animation: rotate 4s infinite linear;*/ margin: 0px; padding: 0px; } /*地球*/ .earth { left:266.5px; top:391px; height: 18px; width: 18px; background-color: rgb(115,114,174); border-radius: 50%; position: absolute; transform-origin: 134px 9px; animation: rotate 6.25s infinite linear; } /*地球轨道*/ .earthOrbit { left:275px; top:275px; height: 250px; width: 250px; background-color: transparent; border-radius: 50%; border-style: dashed; border-color: gray; position: absolute; border-width: 1px; /*margin: 100px;*/ /*transform-origin: -75px -75px;*/ /*animation: rotate 4s infinite linear;*/ margin: 0px; padding: 0px; } /*火星*/ .mars { left:222.5px; top:392.5px; height: 15px; width: 15px; background-color: rgb(140,119,63); border-radius: 50%; position: absolute; transform-origin: 177.5px 7.5px; animation: rotate 11.75s infinite linear; } /*火星轨道*/ .marsOrbit { left:230px; top:230px; height: 340px; width: 340px; background-color: transparent; border-radius: 50%; border-style: dashed; border-color: gray; position: absolute; border-width: 1px; /*margin: 100px;*/ /*transform-origin: -75px -75px;*/ /*animation: rotate 4s infinite linear;*/ margin: 0px; padding: 0px; } /*木星*/ .jupiter { left:134px; top:379px; height: 42px; width: 42px; background-color: rgb(156,164,143); border-radius: 50%; position: absolute; transform-origin: 266px 21px; animation: rotate 74.04s infinite linear; } /*木星轨道*/ .jupiterOrbit { left:155px; top:155px; height: 490px; width: 490px; background-color: transparent; border-radius: 50%; border-style: dashed; border-color: gray; position: absolute; border-width: 1px; /*margin: 100px;*/ /*transform-origin: -75px -75px;*/ /*animation: rotate 4s infinite linear;*/ margin: 0px; padding: 0px; } /*土星*/ .saturn { left:92px; top:387px; height: 26px; width: 26px; background-color: rgb(215,171,68); border-radius: 50%; position: absolute; transform-origin: 308px 13px; animation: rotate 183.92s infinite linear; } /*土星轨道*/ .saturnOrbit { left:105px; top:105px; height: 590px; width: 590px; background-color: transparent; border-radius: 50%; border-style: dashed; border-color: gray; position: absolute; border-width: 1px; /*margin: 100px;*/ /*transform-origin: -75px -75px;*/ /*animation: rotate 4s infinite linear;*/ margin: 0px; padding: 0px; } /*天王星*/ .uranus { left:41.5px; top:386.5px; height: 27px; width: 27px; background-color: rgb(164,192,206); border-radius: 50%; position: absolute; transform-origin: 358.5px 13.5px; animation: rotate 524.46s infinite linear; } /*天王星轨道*/ .uranusOrbit { left:55px; top:55px; height: 690px; width: 690px; background-color: transparent; border-radius: 50%; border-style: dashed; border-color: gray; position: absolute; border-width: 1px; /*margin: 100px;*/ /*transform-origin: -75px -75px;*/ /*animation: rotate 4s infinite linear;*/ margin: 0px; padding: 0px; } /*海王星*/ .neptune { left:10px; top:390px; height: 20px; width: 20px; background-color: rgb(133,136,180); border-radius: 50%; position: absolute; transform-origin: 390px 10px; animation: rotate 1028.76s infinite linear; } /*海王星轨道*/ .neptuneOrbit { left:20px; top:20px; height: 760px; width: 760px; background-color: transparent; border-radius: 50%; border-style: dashed; border-color: gray; position: absolute; border-width: 1px; /*margin: 100px;*/ /*transform-origin: -75px -75px;*/ /*animation: rotate 4s infinite linear;*/ margin: 0px; padding: 0px; } @keyframes rotate { 100% { transform: rotate(-360deg); } } 下面请尽情欣赏动画 这是一个基础的颜色变换 这是一个带移动的动画 大佬的太阳系公转动画orz L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","model":{"jsonPath":"/live2dw/assets/assets/hibiki.model.json"},"display":{"position":"left","width":100,"height":300},"mobile":{"show":false},"log":false,"tagMode":false});]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2Funcategorizedcss3%2F</url>
    <content type="text"><![CDATA[css3过渡测试 div.one { width: 400px; height: 400px; background-color: red; transition: width 2s; } div.one:hover { width: 200px; } div.two { width: 400px; height: 400px; background-color: blue; transition: all 2s; } div.two:hover { background-color: yellow; transform: rotate(270deg) translate(100px,100px); } div.three { width: 400px; height: 400px; background-color: black; transition: all 3s; } div.three:hover { width: 200px; height: 200px; background-color: white; transform: rotateY(360deg); } 下面演示几种过渡效果，你只需要把鼠标放上即可 这是第一种效果 这是第二种效果 这是第三种效果 L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","model":{"jsonPath":"/live2dw/assets/assets/hibiki.model.json"},"display":{"position":"left","width":100,"height":300},"mobile":{"show":false},"log":false,"tagMode":false});]]></content>
  </entry>
  <entry>
    <title><![CDATA[CSS3过渡实验]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF12%2F</url>
    <content type="text"><![CDATA[既然是要过渡那么就需要先看看过渡是什么了下面放例子点击这里查看效果 过渡的实现css3 2D与3D变换全部用到transform属性2d和3d都是通用的格式2d:translate() rotate() scale()字面意思就是变换位置旋转变换大小3d:translateX translateY translatezZ其他的一样都是加上XYZ即可 过渡用到了transition: all xs;x更改为你需要转换的时间之后只需要再定义一个hover伪类进行鼠标放上去的一顿2d3d变换即可 源代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;!DOCTYPE html&gt;&lt;html lang="en" dir="ltr"&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;css3过渡测试&lt;/title&gt; &lt;style&gt; div.one &#123; width: 400px; height: 400px; background-color: red; transition: width 2s; &#125; div.one:hover &#123; width: 200px; &#125; div.two &#123; width: 400px; height: 400px; background-color: blue; transition: all 2s; &#125; div.two:hover &#123; background-color: yellow; transform: rotate(270deg) translate(100px,100px); &#125; div.three &#123; width: 400px; height: 400px; background-color: black; transition: all 3s; &#125; div.three:hover &#123; width: 200px; height: 200px; background-color: white; transform: rotateY(360deg); &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;&lt;b&gt;下面演示几种过渡效果,你只需要把鼠标放上即可&lt;/b&gt;&lt;/h1&gt; &lt;div class="one"&gt; &lt;/div&gt; &lt;p&gt;这是第一种效果&lt;/p&gt; &lt;div class="two"&gt; &lt;/div&gt; &lt;p&gt;这是第二种效果&lt;/p&gt; &lt;div class="three"&gt; &lt;/div&gt; &lt;p&gt;这是第三种效果&lt;/p&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bfs判断转弯次数]]></title>
    <url>%2F%E7%AE%97%E6%B3%9511%2F</url>
    <content type="text"><![CDATA[bfs判断转弯次数也就是顾名思义我们如何来应对需要至少转弯多少次或者计算总共转弯多少次的题目 胡乱分析例题 P1649 [USACO07OCT]障碍路线Obstacle Course算法核心在于对每个能到达的部分进行枚举然后进行一波更新123456789101112131415for(int i=0;i&lt;4;i++)&#123; int xx=p.x+dx[i]; int yy=p.y+dy[i]; while(check(xx,yy)) &#123; if(step[xx][yy]&gt;step[p.x][p.y]+1) &#123; step[xx][yy]=step[p.x][p.y]+1; q.push((node)&#123;xx,yy&#125;); &#125; xx+=dx[i]; yy+=dy[i]; &#125;&#125; 还需要注意除了开始节点设置为-1其他节点初始化都为inf(也就是一个极大值) 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;bits/stdc++.h&gt;using namespace std;char mp[666][666];int sx,sy,ex,ey,f,step[666][666];struct node&#123; int x,y;&#125;;int dx[]=&#123;-1,1,0,0&#125;;int dy[]=&#123;0,0,-1,1&#125;;int main()&#123; ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); int n; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) &#123; cin&gt;&gt;mp[i][j]; if(mp[i][j]=='A') sx=i,sy=j; else if(mp[i][j]=='B') ex=i,ey=j; step[i][j]=99999; &#125; step[sx][sy]=-1; queue&lt;node&gt; q; q.push((node)&#123;sx,sy&#125;); while(q.size()) &#123; node p=q.front(); q.pop(); if(p.x==ex&amp;&amp;p.y==ey) &#123; f=1; break; &#125; for(int i=0;i&lt;4;i++) &#123; int xx=p.x+dx[i]; int yy=p.y+dy[i]; while(xx&gt;=1&amp;&amp;yy&gt;=1&amp;&amp;xx&lt;=n&amp;&amp;yy&lt;=n&amp;&amp;mp[xx][yy]!='x') &#123; if(step[xx][yy]&gt;step[p.x][p.y]+1) &#123; step[xx][yy]=step[p.x][p.y]+1; q.push((node)&#123;xx,yy&#125;); &#125; xx+=dx[i]; yy+=dy[i]; &#125; &#125; &#125; cout&lt;&lt;(f?step[ex][ey]:-1);&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html学习(1)]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF10%2F</url>
    <content type="text"><![CDATA[本文我准备都用html进行书写 实际上也没有多少需要书写的内容直接放上这部分的代码即可了 这次也是基本的学习完了html的一些基础操作 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110&lt;html&gt; &lt;head&gt; &lt;title&gt;my first html&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;this is h1&lt;/h1&gt; &lt;p&gt;this is p&lt;/p&gt; &lt;p&gt;&lt;b&gt;粗体字&lt;/b&gt;&lt;/p&gt; &lt;p&gt;&lt;i&gt;italic&lt;/i&gt;&lt;/p&gt; &lt;p&gt;e=mc&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt; &lt;p&gt;co&lt;sub&gt;2&lt;/sub&gt;&lt;/p&gt; &lt;p&gt;换行符&lt;br /&gt;换行符&lt;/p&gt; &lt;p&gt;插入横线&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;横线下面&lt;/p&gt; &lt;p&gt;&lt;strong&gt;strong&lt;/strong&gt; &lt;em&gt;em&lt;/em&gt; &lt;/p&gt; &lt;blockquote cite="http://www.baidu.com"&gt; &lt;p&gt;前往百度&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;cite&gt;cite&lt;/cite&gt;&lt;/p&gt; &lt;p&gt;&lt;dfn&gt;dfn&lt;/dfn&gt;&lt;/p&gt; &lt;p&gt;&lt;ins&gt;ins&lt;/ins&gt;&lt;del&gt;del&lt;/del&gt;&lt;/p&gt; &lt;p&gt;&lt;s&gt;s&lt;/s&gt;&lt;/p&gt; &lt;ol&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;/ol&gt; &lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;/ul&gt; &lt;dl&gt; &lt;dt&gt;1&lt;/dt&gt; &lt;dd&gt;1的内容&lt;/dd&gt; &lt;dt&gt;2&lt;/dt&gt; &lt;dd&gt;2的内容&lt;/dd&gt; &lt;/dl&gt; &lt;a href="https://www.baidu.com"&gt;baidu&lt;/a&gt; &lt;br /&gt; &lt;a href="https://www.baidu.com" target="_blank"&gt;baidu&lt;/a&gt; &lt;br /&gt; &lt;figure&gt; &lt;img src="https://i.loli.net/2019/02/14/5c64fb8ce8b64.jpeg" alt="一张图片" /&gt; &lt;br /&gt; &lt;figcaption&gt; 图片的描述 &lt;/figcaption&gt; &lt;/figure&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;15&lt;/td&gt; &lt;td&gt;15&lt;/td&gt; &lt;td&gt;30&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;15&lt;/td&gt; &lt;td&gt;15&lt;/td&gt; &lt;td&gt;30&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;15&lt;/td&gt; &lt;td&gt;15&lt;/td&gt; &lt;td&gt;30&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;&lt;/th&gt; &lt;th scope="col"&gt;c1&lt;/th&gt; &lt;th scope="col"&gt;c2&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th scope="row"&gt;r1&lt;/th&gt; &lt;td&gt;120&lt;/td&gt; &lt;td&gt;130&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th scope="row"&gt;r2&lt;/th&gt; &lt;td&gt;$600&lt;/td&gt; &lt;td&gt;$675&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;form class="" action="index.html" method="post"&gt; &lt;p&gt; username: &lt;input type="text" name="username" size="15"&gt; &lt;/p&gt; &lt;/form&gt; &lt;form class="" action="index.html" method="post"&gt; &lt;p&gt;密码 &lt;input type="password" name="密码" value="" size="15"&gt; &lt;/p&gt; &lt;/form&gt; &lt;form class="" action="index.html" method="post"&gt; &lt;p&gt;选择一下 &lt;br /&gt; &lt;input type="radio" name="genre" value="rock" checked="checked" /&gt; rock &lt;input type="radio" name="genre" value="pop" /&gt; pop &lt;input type="radio" name="genre" value="jazz" /&gt; jazz &lt;/p&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[背包变形:过程型背包]]></title>
    <url>%2F%E7%AE%97%E6%B3%959%2F</url>
    <content type="text"><![CDATA[过程型背包简单的感觉就是我要记录下是否回到这种情况，也就是说要记录一个最大到达的可能值或者是一个最小到达的可能值 #例1 P1877 [HAOI2012]音量调节 胡乱分析上来bfs得60分。。。dp的思路就是我看看我能最终到达的最大音量是多少，每一步都有两种可能性，也就是我要加音量或者我要减当前的音量所以我们思路就是:for i-&gt;[1,n] (这里表示我们总共弹奏的歌曲数) for j-&gt;[0,maxn] (这里表示我们j从0枚举到最大值) if dp[i-1][j] dp[i][j+num[i]]=dp[i][j-num[i]]=1 (这里表示我们如果上一个音量是合法的那么我们把他所能表示出来的音量也标记为合法的) 代码123456789101112131415161718192021222324#include &lt;bits/stdc++.h&gt;using namespace std;int num[6666],dp[6666][6666];int main()&#123; ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); int n,begin,maxn; cin&gt;&gt;n&gt;&gt;begin&gt;&gt;maxn; for(int i=1;i&lt;=n;i++) cin&gt;&gt;num[i]; dp[0][begin]=1; for(int i=1;i&lt;=n;i++) for(int j=0;j&lt;=maxn;j++) &#123; if(dp[i-1][j]) dp[i][j+num[i]]=dp[i][j-num[i]]=1; &#125; for(int i=maxn;i&gt;=0;i--) if(dp[n][i]) return cout&lt;&lt;i,0; cout&lt;&lt;-1;&#125; 例2 待补充]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[完全背包变形(1) 取数问题]]></title>
    <url>%2F%E7%AE%97%E6%B3%958%2F</url>
    <content type="text"><![CDATA[朴素的完全背包就是总容量一定物品无限能放多少东西，这里记录一下最近遇到的变形取数问题首先需要说明一下板子的基本情况:一个数分解为几个数的和的形式有多少种方案数或者最多/最少能分解为多少位? 例1 P1832 A+B Problem（再升级）胡乱分析看着像是要搜索但是我感觉搜索应该得tle，这个就是比较朴素的取数问题变形了首先我们定义v是背包容量,n是[2,n]内有多少个质数这样把质数放进背包的板子就成型了注意初始值设定dp[0]=1表示什么都不装是有1个的(即这个数本身也算一种) 代码1234567891011121314151617181920212223242526272829303132333435#include &lt;bits/stdc++.h&gt;using namespace std;int isp(int n)&#123; for(int i=2;i*i&lt;=n;i++) if(n%i==0) return 0; return 1;&#125;long long dp[6666],bk[6666],mk[6666],v[6666],p=1;int main()&#123; ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); int n,sum=0; dp[0]=1; for(int i=2;i&lt;=1000;i++) if(isp(i)) bk[i]=1; for(int i=2;i&lt;=1000;i++) &#123; if(bk[i]) &#123; v[p++]=i; sum++; &#125; mk[i]=sum; &#125; cin&gt;&gt;n; for(int i=1;i&lt;=mk[n];i++) for(int j=v[i];j&lt;=n;j++) dp[j]+=dp[j-v[i]]; cout&lt;&lt;dp[n];&#125; 例2 P1679 神奇的四次方数胡乱分析跟例一一模一样注意这里就是把素数换成了四方数把方案数换成了最少的个数同样套板子即可v是这个数的大小，n是[1,n]内有几个四方数这里dp[0]=0数本身不算分解的一部分 代码123456789101112131415161718192021222324252627282930313233#include &lt;bits/stdc++.h&gt;using namespace std;double num[66666],mk[666666];int sum,p=1,dp[666666];int main()&#123; ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); memset(dp,0x7f,sizeof(dp)); dp[0]=0; for(double i=1;;i++) if(pow(i,4)&lt;=1e5) num[p++]=pow(i,4); else break; p=1; for(int i=1;i&lt;=int(1e5);i++) &#123; if(i==num[p]) &#123; p++; sum++; &#125; mk[i]=sum; &#125; int n; cin&gt;&gt;n; for(int i=1;i&lt;=mk[n];i++) for(int j=num[i];j&lt;=n;j++) dp[j]=min(dp[j],dp[int(j-num[i])]+1); cout&lt;&lt;dp[n];&#125; 例3 自然数无序拆分题目描述(摘自中石油oj 10255)美羊羊给喜羊羊和沸羊羊出了一道难题，说谁能先做出来，我就奖励给他我自己做的一样礼物。沸羊羊这下可乐了，于是马上答应立刻做出来，喜羊羊见状，当然也不甘示弱，向沸羊羊发起了挑战。可是这道题目有一些难度，喜羊羊做了一会儿，见沸羊羊也十分头疼，于是就来请教你。题目是这样的：把自然数Ｎ（N&lt;＝100）分解为若干个自然数之和，求出有几种情况。如N＝5时，有7种情况5=1+1+1+1+15=1+1+1+25=1+1+35=1+2+25=1+45=2+35=5怎么样？你要加油帮助喜羊羊哦！ 胡乱分析还是典型的问题，这个更简单了。。。实际上就是套板子即可v是n个数n是n个数注意dp[0]=1代表数本身是算一个的 代码12345678910111213141516#include &lt;bits/stdc++.h&gt;using namespace std;int dp[666];int main()&#123; ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); int n; cin&gt;&gt;n; dp[0]=1; for(int i=1;i&lt;=n;i++) for(int j=i;j&lt;=n;j++) dp[j]+=dp[j-i]; cout&lt;&lt;dp[n];&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[站内更新日志]]></title>
    <url>%2F%E8%AE%B0%E5%BD%950%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX1+RAu3jlaoJK6zEiEOFRzR5vWDI6Ak2QA6VUpO4KJPB0BKjY9HEC5UiCHMqKULbLDJuK8WXsGMU7/iq1+gJmURUwMkQNGqKVdYnHlzIroJjI+uwyMW1PPrMKjDlKyIwaHwIIVvPziepdp32tTrHQAUr0yjDU+7B3KVTivbfZC0C4tiQpPDLArvHt8j3e/Po4+b2Ky7if61gjgRZm455+a8Ci7CrzFQlN9CMSUOuHMY6bEu7bfH1rIjT0DzKy4pkTD5VlASzald6T+B86O2ALp5AI2jq83TlInFLb4Xwus/4/q79V8hatlw/lDgpoJTs6QHjsKXlonUmzJK8+H6uaydR+pF+iZxK5dx0BFZJEn8tU6GlLbS1PS6hEz0XHxKcyzqfhyAVK43/k5FB8GUoqan9r2pB4ltRKTcZ+c1iSjTs9/j+yfueJLnyLtLzCmY+SgskfMkaoPaosfS6hQd/AjkKUl6FjJfU7FjkSJsOMPL1m+wNYtn4eoXUI6evCtlkE0wkjuOtvyBR5deGzKsNC8LwMogjdVMLkO6GPn5yaWAj1dpbRsGeSyoBZ7J+j6HBYPCcOLOP3w3sM34fsvTV9IPslRTQpaAlQRZIRe62shmR9lWajJJQgyGUrkQh2elQ5AswEyREXQlGSD5QgG25CwK3dw4OE51d1wKvDswwTZPvz8qFAtyciNPoGKFUZQz6McFfRFXKMvOXf35esZ6ToARRwPkbIMP/U60RxjX3LEqdMxWxcuQ/HpIDUW+1aKz4/5Wnlz9ZPNN/UYXYZYY1DgO8+zMjxeZcl4VWf8KDHD70LTxtJJscYrQlZ+pqjrywF3UQTOKBF2oEZJkI8BI88n5lNNqCCihDwKF2JJh8VGtfYE9sOozCbxCCUs+clL5mn8AKk+6/6oudqQ1QQeMZdPBMRTqxbbdC4BXyZs8QFO/jByyrIgPK7/AbKNxAf496KogNXXGBFR/vkXQlwnNAHPo0FRNf6fM2WfF778mADTUfnFI6YstUIx9rj2X678T1ei38pjJ1EmA3T86Bnj4yjlMQT8WTEGMZfyt2eZlzTRYXlE4+tvRaSY7FLgN+L//Qu6+1gh5BVVc+nrnqMb83JinoKij9ZRzOO/JDyrZgHa+pimabPUeJzQIx0Vk1JyyK4Oms4X8Iiir8gMH5dgJ6vYFEnz5dtvhGlXSY63m9kE7SExAkL8o1+x0q0b/mzGqG21nMuoFlelIVAIEbg74OWafweNZSHv7wEhVhXMRg7a0ZpRggNe41DYtTvHMrIVjglEbWOYuIsrAY5i4ec6/eURwQKcTlQJ9kYvUlU+ofQEL81yp+PL2IXbSrZbe+C1jz/MiWuPsMPxOTNo2yjFCSMVeRgIc/iMO37errIcoyy2enpf+/vvN8oQ7+RZCznDMsmtSXwnqI4h4VDQ5AiGOSN1tmC8ZJQMG62Epjxn4OudRFGKfy1NvMRa6jD0o60xUa0VySNTODCRbTW1Rd9fVhxibM/Nob+lQvaqhNa0vhIQGVhl44sMIC99Hwwbu2H21oYlESwOkLBWirD4gvpYxFaJVwL9Phs+i889k7a+jKwnLJBq7bIVmakNJiOgXK514XIvnR1zoa7eByGA6Lucf9DU9xmK54L8mEmDyLfVSfHal5KZNu+ZUxMWfjvnkg5GK4ocMK0+Cdlb8pB08OMwEQZFHz109CnsYq4OE= var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Codeforces Round 370 (Div. 2)(前三题)]]></title>
    <url>%2F%E8%A1%A5%E9%A2%980007%2F</url>
    <content type="text"><![CDATA[瞎扯淡整valine 1h后才去，看群里说要去cf打，vj又卡所以这次我直接在cf打的，打完再交vj的话我感觉不大好几分钟一个题，索性就直接不提交vj了最近整这些博客也是弄得有些飘手又生了需要找找手感 A. Memory and Crow(思维&amp;&amp;数学)胡乱分析实际上证明也可以，上来也可以看出来就是相邻两项的和加起来就可以了，注意一下最后一项单独输出即可 代码12345678910111213141516#include &lt;bits/stdc++.h&gt;using namespace std;int num[666666];int main()&#123; ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); int n; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;num[i]; for(int i=2;i&lt;=n;i++) cout&lt;&lt;num[i]+num[i-1]&lt;&lt;" "; cout&lt;&lt;num[n];&#125; B Memory and Trident(思维)胡乱分析上来就先wa的题。。。实际上这个题有个简单的方法。首先我们要注意到奇数个字符是一定不可以的，这个很容易就可以看出来然后我们还要发现有可能前面的步数会走回到过去的，这是我第一次wa发现的。。。那么最后的位置是距离原点有多少个x距离和y距离就有关于我们修改步数的个数了当然x和y看上去应该都是偶数实际上两个奇数相加也可能是偶数这里还需要思考一下，如果两个奇数相加会怎样，实际上还是把一个改成另一个即可了也就是说x变成y的步数，因为这里是随意更改的很随意的一种感觉最后我们可以得出结论答案就是(abs(x)+abs(y))/2这里确实不好说明情况，但是肯定是存在能搬回去的步子的还有一个codeforces的题跟这个任意修改的感觉挺像的B. Jumping Jack 代码12345678910111213141516171819202122232425#include &lt;bits/stdc++.h&gt;using namespace std;int main()&#123; ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); string a; int x=0,y=0; cin&gt;&gt;a; if(a.size()&amp;1) return cout&lt;&lt;-1,0; for(int i=0;i&lt;a.size();i++) &#123; if(a[i]=='U') x++; else if(a[i]=='D') x--; else if(a[i]=='R') y++; else if(a[i]=='L') y--; &#125; cout&lt;&lt;(abs(x)+abs(y))/2;&#125; Memory and De-Evolution(思维&amp;&amp;数学)胡乱分析首先我们要知道两边之和与第三边的关系，这就是这个题唯一的数学储备。然后我们看第三个样例发现我要是直接22-4不如22-7好，那么我们如何去寻找到这个x=7找到最优的这一步呢？接下去的最优步又怎么找呢？这里确实比较复杂，我是搞不出来。但是如果一想我们倒着来，也就是说我们不管你初始化边长如何，我们用短的去一直往上走最优解看什么时候三条边都走回到大于等于x即可，这样每次都是能保证是最优的所以可以保证能用最少的步数 代码1234567891011121314151617181920212223#include &lt;bits/stdc++.h&gt;using namespace std;int main()&#123; ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); int x,y,a,b,c,ans=0; cin&gt;&gt;x&gt;&gt;y; a=b=c=y; while(1) &#123; if(a&gt;=x&amp;&amp;b&gt;=x&amp;&amp;c&gt;=x) return cout&lt;&lt;ans,0; ans++; if(ans%3==0) a=b+c-1; else if(ans%3==1) b=a+c-1; else if(ans%3==2) c=a+b-1; &#125;&#125;]]></content>
      <categories>
        <category>补题</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[my goals]]></title>
    <url>%2F%E8%AE%B0%E5%BD%950006%2F</url>
    <content type="text"><![CDATA[马上就要开学了总结一下寒假里面的得与失预期：①Codeforces上到specialist(但是又掉下来了最近就保持了几天)②进行一些dp的学习(但是并没有学多少，学的好多东西也忘记了。。。)③学习python项目:(1)pygame编写了一个flappy bird之后就没有之后了，目前也不大记得了还要复习(2)tkinter中途放手，当时竞赛繁忙。(3)python oop学习完成50%也就会一些基本的重载运算符啥子的玩意，高深语法不会④减肥8斤，目前只减肥了4斤⑤恶补acm知识。。。。并没有学多少，还是混混的今后打算：①学习考研数学，先把数学学会了，目前感觉考研数学的恶心程度比高考轻一些②背四级词汇(背了两天最近弄博客又咕咕了)③继续减肥争取大一下学期能再减10斤④抽空学学前端⑤抽空学学python⑥继续抗acm]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Codeforces Round 538 (Div. 2) (补题)]]></title>
    <url>%2F%E8%A1%A5%E9%A2%980005%2F</url>
    <content type="text"><![CDATA[感慨爬到青名的第一战，结果B题没有过system test又掉回到了1390+，这次越南出题组出的题还是比较有意思的 A Got Any Grapes?(模拟)分析根据题意我们可以进行模拟首先第一个人只吃绿色的，第二个人吃绿色和紫色的，第三个人通吃所以就可以得出我们先把绿色给第一个人吃，剩下的绿色和紫色给第二个人，最后剩下的给第三个人只要哪一步出现了问题，也就是说不够吃那么就是NO都可以就输出YES 代码1234567891011121314151617181920#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); int n,m,k,x,y,z; cin&gt;&gt;n&gt;&gt;m&gt;&gt;k&gt;&gt;x&gt;&gt;y&gt;&gt;z; x-=n; if(x&lt;0) return cout&lt;&lt;"NO",0; int t1=x+y-m; if(t1&lt;0) return cout&lt;&lt;"NO",0; int t2=t1+z-k; if(t2&lt;0) return cout&lt;&lt;"NO",0; cout&lt;&lt;"YES";&#125; B Yet Another Array Partitioning Task(贪心+模拟)分析这个题操作很感人啊，当时我一看不就是把前mk个数加起来求和么，结果发现还有第二步找断点断点的寻找也是比较的难想，这里我分享一个简单的实现首先就是要找单位区间内的最大的理想值，我们需要把所有的前km项都要用上所以说我们要看看区间内是否符合当前m个要找的数操作方法就是把每个数先记下原来的坐标然后降序排列，定义一个新的数组用降序排列的顺序把原来的坐标定位到当前坐标也就是说要1bk[pre[i].id]=i; 然后走一遍原先的坐标的顺序，就可以知道当前坐标是不是满足且合适的数了 代码123456789101112131415161718192021222324252627282930313233343536373839#include &lt;bits/stdc++.h&gt;using namespace std;struct node&#123; long long sum,id;&#125;num[666666];bool cmp(node a,node b)&#123; return a.sum&gt;b.sum;&#125;int bk[666666];int main()&#123; ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); long long n,m,k,te=0,cnt=0,ans=0; cin&gt;&gt;n&gt;&gt;m&gt;&gt;k; for(int i=1;i&lt;=n;i++) cin&gt;&gt;num[i].sum,num[i].id=i; sort(num+1,num+n+1,cmp); for(int i=1;i&lt;=m*k;i++) ans+=num[i].sum; for(int i=1;i&lt;=n;i++) bk[num[i].id]=i; cout&lt;&lt;ans&lt;&lt;"\n"; for(int i=1;i&lt;=n;i++) &#123; if(bk[i]&lt;=k*m) te++; if(te==m) &#123; cnt++; if(cnt&lt;k) cout&lt;&lt;i&lt;&lt;" "; te=0; &#125; &#125;&#125; C Trailing Loves (or L’oeufs?)(数论)分析很巧妙的一个题，用到数论的知识首先n!可以分解质因数并且b也能分解质因数所以我们可以用木桶原理看看这些阶乘里面最少能装几组质因数的次方首先我们要明白一个概念一个十进制有一个0代表这个十进制能整除10有两个0代表他能被10^2整除同样b进制也一样如果有一个0代表能被b整除有两个代表能被b^2整除且这是一个木桶原理也就是说找最小值就是能找到几个0然后就是分解质因数这里有一个十分巧妙的方法分解n!首先分解单个数的要寻找的质因数就是去寻找能被整除的次数也就是说如果找150有几个0就是循环2*5的分解质因数也就是12345while(b%2==0)&#123; b/=2; cnt++;&#125; 然后求出最小值即可这样就能找到0的个数是11ans=min(ans1,ans2); 同样如果是n!那么我们会发现1-n总共有n个数所以说呢，我们需要进行一种特殊的方法同样以150为例不过这次是150!后有多少个0我们就需要寻找150能被2整除的多少次能被5整除的多少次也就是说12345while(b/2)&#123; cnt+=b/2; b/=2;&#125; 最后取min即可最终我们结合两个步骤先质因数分解b然后接着分解a最后找floor(ai/bi)的最小值即可这里还需要注意有一个小小的优化那就是我们需要如果当前走的i*i&gt;b那么i=b因为一个数n的因子最大是sqrt(n)这里也是b在慢慢的缩小也是一种优化 代码123456789101112131415161718192021222324252627282930313233#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;int main()&#123; ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); ll n,b; cin&gt;&gt;n&gt;&gt;b; ll ans=ll(1e18); for(ll i=2;i&lt;=b;i++) &#123; if(1LL*i*i&gt;b) i=b; ll cnt=0; while(b%i==0) &#123; b/=i; cnt++; &#125; if(cnt==0) continue; ll tmp=0,now=n; while(now/i) &#123; tmp+=now/i; now/=i; &#125; ans=min(ans,tmp/cnt); &#125; cout&lt;&lt;ans;&#125; D Flood Fill(DP)分析有二维的解法但是我太蒟蒻了，只会三维的。这个上来还容易re实际上就是定义两个：dp[l][r][0]代表最少需要多少步能够使l,r区域内都是num[l]颜色dp[l][r][1]代表最少需要多少步能够使l,r区域内都是num[r]颜色那么转移方程就是：dp[l-1][r][0]=min(dp[l-1][r][0],dp[l][r][t(当前的开关)]+左边的颜色与当前的颜色一样?1:0)第二个同理还有就是要注意这种枚举区间的方式 代码12345678910111213141516171819202122232425262728#include &lt;bits/stdc++.h&gt;using namespace std;int num[5001];int dp[5001][5001][2];int main()&#123; ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); int n; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;num[i]; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) dp[i][j][0]=dp[i][j][1]=(i==j?0:999999); for(int r=1;r&lt;=n;r++) for(int l=r;l&gt;=1;l--) for(int t=0;t&lt;2;t++) &#123; int now=t==0?num[l]:num[r]; if(l&gt;1) dp[l-1][r][0]=min(dp[l-1][r][0],dp[l][r][t]+(now!=num[l-1])); if(r&lt;n) dp[l][r+1][1]=min(dp[l][r+1][1],dp[l][r][t]+(now!=num[r+1])); &#125; cout&lt;&lt;min(dp[1][n][0],dp[1][n][1]);&#125;]]></content>
      <categories>
        <category>补题</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[历时多天终于基本弄完了博客]]></title>
    <url>%2F%E8%AE%B0%E5%BD%950004%2F</url>
    <content type="text"><![CDATA[虽然还有很多不尽人意的地方，以后会慢慢的修改目前就先这样了！！！]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[加密文档测试，密码为6个6]]></title>
    <url>%2F%E6%B5%8B%E8%AF%950003%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX1+rXRo5L7+r6Kz2XlJr5ZBDqCvcf7O5uX3knQs4GdLv8Khf0Wxp/pTA3zgpbO6ybMFgiG15pFEZICcfiVeiAiiGNblaN/uLh/m+wK54OvRVLtYLFMKuYLpBWSt4pZtIuoI3SzLjqcP3Loek2oXtPwkrqHlO4N0OfVd2WJkX0YZfI9mOvMiYkImfwukzYaKxdnL1KxIqO61Fb8cLmVQ4ucPz7chquqw4KGbyawOC8fxP2amUZjxz0eBFNOCKd0X2OKdPUtX5U/u3E+OEz8MRTtuintxJFBWraaFOF0+kYHOt6sQPmp+AnFak7uhdpM7MISG/CiiMxCn2rg== var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>test something</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三种语言样例测试]]></title>
    <url>%2F%E6%B5%8B%E8%AF%950002%2F</url>
    <content type="text"><![CDATA[测试一下三种语言的代码风格c语言版本1234567#include &lt;stdio.h&gt;int main()&#123; int a,b; scanf("%d%d",&amp;a,&amp;b); printf("%d",a+b);&#125; c++版本1234567891011#include &lt;bits/stdc++.h&gt;using namespace std;int main()&#123; ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); int a,b; cin&gt;&gt;a&gt;&gt;b; cout&lt;&lt;a+b;&#125; python 版本123from math import *for i in range(1,11): print(2**i)]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>test something</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello Anybody here?]]></title>
    <url>%2F%E8%AE%B0%E5%BD%950001%2F</url>
    <content type="text"><![CDATA[新博客正式启动！！！！多谢各位大佬的照顾与支持，新的一年里得更加的努力！！！老博客暂时不更新了SO FIGHTING!!!!]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
</search>
